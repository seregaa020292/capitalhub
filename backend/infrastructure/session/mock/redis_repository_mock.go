// Code generated by MockGen. DO NOT EDIT.
// Source: redis_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	"github.com/seregaa020292/capitalhub/internal/auth/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSessRepository is a mock of SessRepository interface.
type MockSessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessRepositoryMockRecorder
}

// MockSessRepositoryMockRecorder is the mock recorder for MockSessRepository.
type MockSessRepositoryMockRecorder struct {
	mock *MockSessRepository
}

// NewMockSessRepository creates a new mock instance.
func NewMockSessRepository(ctrl *gomock.Controller) *MockSessRepository {
	mock := &MockSessRepository{ctrl: ctrl}
	mock.recorder = &MockSessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessRepository) EXPECT() *MockSessRepositoryMockRecorder {
	return m.recorder
}

// CleanMaxSession mocks base method.
func (m *MockSessRepository) CleanMaxSession(ctx context.Context, userID uuid.UUID) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanMaxSession", ctx, userID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CleanMaxSession indicates an expected call of CleanMaxSession.
func (mr *MockSessRepositoryMockRecorder) CleanMaxSession(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanMaxSession", reflect.TypeOf((*MockSessRepository)(nil).CleanMaxSession), ctx, userID)
}

// CreateSession mocks base method.
func (m *MockSessRepository) CreateSession(ctx context.Context, session *model.Session, expire int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessRepositoryMockRecorder) CreateSession(ctx, session, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessRepository)(nil).CreateSession), ctx, session, expire)
}

// DeleteByID mocks base method.
func (m *MockSessRepository) DeleteByID(ctx context.Context, userID uuid.UUID, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, userID, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockSessRepositoryMockRecorder) DeleteByID(ctx, userID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockSessRepository)(nil).DeleteByID), ctx, userID, sessionID)
}

// GetSessionByID mocks base method.
func (m *MockSessRepository) GetSessionByID(ctx context.Context, userID uuid.UUID, sessionID string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, userID, sessionID)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockSessRepositoryMockRecorder) GetSessionByID(ctx, userID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockSessRepository)(nil).GetSessionByID), ctx, userID, sessionID)
}

// RefreshByID mocks base method.
func (m *MockSessRepository) RefreshByID(ctx context.Context, sess *model.Session, newSessionID string, expire int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshByID", ctx, sess, newSessionID, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshByID indicates an expected call of RefreshByID.
func (mr *MockSessRepositoryMockRecorder) RefreshByID(ctx, sess, newSessionID, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshByID", reflect.TypeOf((*MockSessRepository)(nil).RefreshByID), ctx, sess, newSessionID, expire)
}
