basePath: /api/v1
definitions:
  httpErrors.RestErr:
    type: object
  httpErrors.RestError:
    properties:
      error:
        type: string
      status:
        type: integer
    type: object
  model.AccessToken:
    properties:
      prefixToken:
        type: string
      token:
        type: string
    type: object
  model.Asset:
    properties:
      amount:
        type: integer
      assetId:
        type: string
      createdAt:
        type: string
      marketId:
        type: string
      notationAt:
        type: string
      portfolioId:
        type: string
      quantity:
        type: integer
      updatedAt:
        type: string
    required:
    - amount
    - marketId
    - portfolioId
    - quantity
    type: object
  model.AssetAdd:
    properties:
      amount:
        type: integer
      marketId:
        type: string
      notationAt:
        type: string
      portfolioId:
        type: string
      quantity:
        type: integer
    required:
    - amount
    - marketId
    - portfolioId
    - quantity
    type: object
  model.AssetBase:
    properties:
      amount:
        type: integer
      assetId:
        type: string
      imageUrl:
        type: string
      notationAt:
        type: string
      portfolioId:
        type: string
      quantity:
        type: integer
      ticker:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    required:
    - amount
    - portfolioId
    - quantity
    - ticker
    - title
    - userId
    type: object
  model.AssetList:
    properties:
      assets:
        items:
          $ref: '#/definitions/model.AssetBase'
        type: array
      hasMore:
        type: boolean
      page:
        type: integer
      size:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  model.AssetTotal:
    properties:
      averagePurchasePrice:
        type: integer
      firstNotationAt:
        type: string
      identify:
        type: string
      imageUrl:
        type: string
      marketId:
        type: string
      ticker:
        type: string
      title:
        type: string
      totalAmount:
        type: integer
      totalCount:
        type: integer
      totalQuantity:
        type: integer
    type: object
  model.Currency:
    properties:
      createdAt:
        type: string
      currencyId:
        type: string
      description:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - description
    - title
    type: object
  model.Dashboard:
    properties:
      currencies:
        items:
          $ref: '#/definitions/model.Currency'
        type: array
    type: object
  model.Market:
    properties:
      content:
        type: string
      createdAt:
        type: string
      currencyId:
        type: string
      imageUrl:
        type: string
      instrumentId:
        type: string
      marketId:
        type: string
      ticker:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - currencyId
    - instrumentId
    - ticker
    - title
    type: object
  model.MarketBase:
    properties:
      content:
        type: string
      descInstrument:
        type: string
      imageUrl:
        type: string
      marketId:
        type: string
      ticker:
        type: string
      title:
        type: string
      titleInstrument:
        type: string
      updatedAt:
        type: string
    required:
    - descInstrument
    - ticker
    - title
    - titleInstrument
    type: object
  model.MarketList:
    properties:
      hasMore:
        type: boolean
      markets:
        items:
          $ref: '#/definitions/model.MarketBase'
        type: array
      page:
        type: integer
      size:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  model.Portfolio:
    properties:
      active:
        type: boolean
      createdAt:
        type: string
      currencyId:
        type: string
      portfolioId:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    required:
    - active
    - currencyId
    - title
    - userId
    type: object
  model.PortfolioChange:
    properties:
      currencyId:
        type: string
      title:
        type: string
    required:
    - currencyId
    - title
    type: object
  model.PortfolioList:
    properties:
      assetTotal:
        items:
          $ref: '#/definitions/model.AssetTotal'
        type: array
      portfolio:
        $ref: '#/definitions/model.Portfolio'
    type: object
  model.PortfolioStats:
    properties:
      active:
        type: boolean
      assetAmount:
        type: integer
      assetQuantity:
        type: integer
      currencyDesc:
        type: string
      currencyId:
        type: string
      currencyTitle:
        type: string
      portfolioId:
        type: string
      title:
        type: string
    type: object
  model.RefreshToken:
    properties:
      token:
        type: string
    type: object
  model.Tokens:
    properties:
      accessToken:
        $ref: '#/definitions/model.AccessToken'
      refreshToken:
        $ref: '#/definitions/model.RefreshToken'
    type: object
  model.User:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    required:
    - name
    - password
    type: object
  model.UserBase:
    properties:
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.UserWithToken:
    properties:
      accessToken:
        $ref: '#/definitions/model.AccessToken'
      refreshToken:
        $ref: '#/definitions/model.RefreshToken'
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.UsersList:
    properties:
      hasMore:
        type: boolean
      page:
        type: integer
      size:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API
  title: REST API
  version: "1.0"
paths:
  /application/dashboard:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Dashboard'
      security:
      - Auth: []
      summary: Общие данные для панели
      tags:
      - Application
  /asset/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: asset_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Удалить актив
      tags:
      - Asset
    get:
      consumes:
      - application/json
      parameters:
      - description: asset_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Asset'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Получить актив по идентификатору
      tags:
      - Asset
    put:
      consumes:
      - application/json
      parameters:
      - description: asset_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Asset'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Обновить данные актива
      tags:
      - Asset
  /asset/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: Add asset
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.AssetAdd'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Asset'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Создать новый актив пользователя
      tags:
      - Asset
  /asset/all:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.AssetList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Активы пользователя
      tags:
      - Asset
  /asset/market/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: market_id
        in: path
        name: id
        required: true
        type: integer
      - description: page number
        format: page
        in: query
        name: page
        type: integer
      - description: number of elements per page
        format: size
        in: query
        name: size
        type: integer
      - description: filter name
        format: orderBy
        in: query
        name: orderBy
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AssetList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Получить все активы по идентификатору ценной бумаги/товара
      tags:
      - Asset
  /asset/total-all:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.AssetTotal'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Активы пользователя, подсчитанные
      tags:
      - Asset
  /auth/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      security:
      - Auth: []
      summary: Удалить учетную запись пользователя
      tags:
      - Auth
    get:
      consumes:
      - application/json
      parameters:
      - description: user_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Получить пользователя по идентификатору
      tags:
      - Auth
    put:
      consumes:
      - application/json
      description: Обновить существующего пользователя
      parameters:
      - description: user_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - Auth: []
      summary: Обновить пользователя
      tags:
      - Auth
  /auth/{id}/avatar:
    post:
      consumes:
      - application/json
      parameters:
      - description: Body with image file
        in: formData
        name: file
        required: true
        type: file
      - description: aws s3 bucket
        format: bucket
        in: query
        name: bucket
        required: true
        type: string
      - description: user_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      security:
      - Auth: []
      summary: Опубликовать аватар пользователя
      tags:
      - Auth
  /auth/all:
    get:
      consumes:
      - application/json
      parameters:
      - description: page number
        format: page
        in: query
        name: page
        type: integer
      - description: number of elements per page
        format: size
        in: query
        name: size
        type: integer
      - description: filter name
        format: orderBy
        in: query
        name: orderBy
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Получить список всех пользователей
      tags:
      - Auth
  /auth/check:
    get:
      consumes:
      - application/json
      description: Проверить токен на действительность
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserBase'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      security:
      - Auth: []
      summary: Проверить зарегистрированного пользователя
      tags:
      - Auth
  /auth/confirmed:
    get:
      consumes:
      - application/json
      description: Подтверждается почта
      parameters:
      - description: code
        format: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Подтверждение почты
      tags:
      - Auth
  /auth/find:
    get:
      consumes:
      - application/json
      parameters:
      - description: username
        format: username
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Найти пользователя по имени
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Войти в систему, вернуть пользователя и установить сеанс
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserWithToken'
      summary: Вход пользователя
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Удаление сеанса пользователя
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Выйти из системы
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновить и вернуть новые токены
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Tokens'
      security:
      - Auth: []
      summary: Обновить токен
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Зарегистрировать и вернуть пользователя и токен
      parameters:
      - description: register user
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: ""
      summary: Зарегистрировать нового пользователя
      tags:
      - Auth
  /auth/token:
    get:
      consumes:
      - application/json
      description: Получить токен CSRF, обязательный cookie сеанса авторизации
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      security:
      - Auth: []
      summary: Получить токен CSRF
      tags:
      - Auth
  /market/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: market_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - Auth: []
      summary: Удалить ценную бумагу/товар
      tags:
      - Market
    get:
      consumes:
      - application/json
      parameters:
      - description: market_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Market'
      security:
      - Auth: []
      summary: Получить по id ценную бумагу/товар
      tags:
      - Market
    put:
      consumes:
      - application/json
      parameters:
      - description: market_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Market'
      security:
      - Auth: []
      summary: Изменить данные ценной бумаги/товара
      tags:
      - Market
  /market/all:
    get:
      consumes:
      - application/json
      description: Получить все ценные бумаги/товары с разбивкой на страницы
      parameters:
      - description: page number
        format: page
        in: query
        name: page
        type: integer
      - description: number of elements per page
        format: size
        in: query
        name: size
        type: integer
      - description: filter name
        format: orderBy
        in: query
        name: orderBy
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MarketList'
      security:
      - Auth: []
      summary: Получить все ценные бумаги/товары
      tags:
      - Market
  /market/create:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Market'
      security:
      - Auth: []
      summary: Добавить новую ценную бумаги/товара
      tags:
      - Market
  /market/parse:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - Auth: []
      summary: Спарсить
      tags:
      - Market
  /market/search:
    get:
      consumes:
      - application/json
      description: Искать ценную бумагу/товар по названию
      parameters:
      - description: title
        in: query
        name: title
        type: integer
      - description: page number
        format: page
        in: query
        name: page
        type: integer
      - description: number of elements per page
        format: size
        in: query
        name: size
        type: integer
      - description: filter name
        format: orderBy
        in: query
        name: orderBy
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MarketList'
      security:
      - Auth: []
      summary: Поиск по названию
      tags:
      - Market
  /portfolio/{portfolio_id}:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - Auth: []
      summary: Удаление портфеля
      tags:
      - Portfolio
    put:
      consumes:
      - application/json
      parameters:
      - description: Edit portfolio
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PortfolioChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PortfolioStats'
      security:
      - Auth: []
      summary: Изменение данных портфеля
      tags:
      - Portfolio
  /portfolio/{portfolio_id}/choose:
    put:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - Auth: []
      summary: Сменить активный портфель пользователя
      tags:
      - Portfolio
  /portfolio/active-total:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PortfolioList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestErr'
      security:
      - Auth: []
      summary: Портфель пользователя
      tags:
      - Portfolio
  /portfolio/add:
    get:
      consumes:
      - application/json
      parameters:
      - description: Add portfolio
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PortfolioChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PortfolioStats'
      security:
      - Auth: []
      summary: Портфели пользователя
      tags:
      - Portfolio
  /portfolio/all-stats:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.PortfolioStats'
            type: array
      security:
      - Auth: []
      summary: Портфели пользователя
      tags:
      - Portfolio
securityDefinitions:
  Auth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
